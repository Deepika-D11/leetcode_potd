import java.util.*;

class Solution {
    public long minimumDifference(int[] nums) {
        int n = nums.length;
        int k = n / 3;

        long[] leftMins = new long[n];
        long[] rightMaxs = new long[n];
        PriorityQueue<Integer> maxLeftHeap = new PriorityQueue<>(Collections.reverseOrder()); // max-heap
        PriorityQueue<Integer> minRightHeap = new PriorityQueue<>(); // min-heap

        long leftSum = 0, rightSum = 0;
        long minDiff = Long.MAX_VALUE;

        // Build leftMins (smallest k elements from left using max-heap)
        for (int i = 0; i < k; i++) {
            maxLeftHeap.add(nums[i]);
            leftSum += nums[i];
        }
        leftMins[k - 1] = leftSum;

        for (int i = k; i < n - k; i++) {
            if (!maxLeftHeap.isEmpty() && nums[i] < maxLeftHeap.peek()) {
                leftSum += nums[i] - maxLeftHeap.poll();
                maxLeftHeap.add(nums[i]);
            }
            leftMins[i] = leftSum;
        }

        // Build rightMaxs (largest k elements from right using min-heap)
        for (int i = n - 1; i >= n - k; i--) {
            minRightHeap.add(nums[i]);
            rightSum += nums[i];
        }
        rightMaxs[n - k] = rightSum;

        for (int i = n - k - 1; i >= k - 1; i--) {
            if (!minRightHeap.isEmpty() && nums[i] > minRightHeap.peek()) {
                rightSum += nums[i] - minRightHeap.poll();
                minRightHeap.add(nums[i]);
            }
            rightMaxs[i] = rightSum;
        }

        // Compute the minimum difference
        for (int i = k - 1; i < n - k; i++) {
            minDiff = Math.min(minDiff, leftMins[i] - rightMaxs[i + 1]);
        }

        return minDiff;
    }
}
